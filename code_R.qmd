---
title: "Dashboard"
format: 
  dashboard:
    df-print: paged
orientation: columns
server: shiny
---
  
  
  
```{r}
#| context: setup
#| echo: false
#| message: false
require(dplyr)
require(ggplot2)
require(plotly)
require(tidyr)
require(shiny)

```


# Analyse univariée

## Sidebar {.sidebar}


```{r}
selectInput(
  inputId =  "variableInputId",
  label = "Variable",
  choices = names(iris)[-5],
)
```


## column {width = 30%}

```{r}


tableOutput(
  outputId = "irisOutputId"
)
tableOutput(
  outputId = "univariateOutputId"
)

```


## {width = 70%}

### row


```{r}
plotlyOutput(
  outputId = "boxplotOutputId"
)


```


### row


```{r}
plotlyOutput(
  outputId = "histogramOutputId"
)

```







## Row {height = 40%}



# Analyse bivariées

## {.sidebar}

```{r}
selectInput(
  inputId =  "variableInputId",
  label = "X",
  choices = names(iris)[-5],
)
```


```{r}

selectInput(
  inputId =  "variable",
  label = "Y",
  choices = names(iris)[-5],
)

```


## 

```{r}

plotlyOutput(
  outputId = "nuagepoint"
)

```




```{r}
#| context: server

output$irisOutputId <- renderTable(
  {
    iris%>%
      head(5)
  }
)

output$univariateOutputId <- renderTable({ 
  
  variable = input$variableInputId
  
  iris %>%
    group_by(Species) %>%
    summarise(
      min = min(!!rlang::sym(variable)),
      q1 = quantile(!!rlang::sym(variable),0.25),
      median = median(!!rlang::sym(variable)),
      q3 = quantile(!!rlang::sym(variable),0.75),
      max = max(!!rlang::sym(variable)),
      mean = mean(!!rlang::sym(variable)) 
    )
}
)

output$boxplotOutputId <- renderPlotly({
  variable = input$variableInputId
  iris %>%
    ggplot(mapping = aes(x= Species,!!rlang::sym(variable))) + 
    geom_boxplot(outlier.color = "black", 
                 fill = 'red', alpha = 0.3, 
                 color = 'steelblue',
                 notch = FALSE) + 
    theme_minimal() 
  
})

output$histogramOutputId <- renderPlotly({
  variable = input$variableInputId
  
  (  iris %>%
      ggplot(mapping = aes(x = !!rlang::sym(variable),fill = Species,color = Species)) +
      geom_histogram(aes(y = after_stat(density)), position = position_identity(),alpha =0.5) +
      geom_density(position = position_identity(),alpha = 0.2) 
  )%>%
    ggplotly()
})

# page bivarié


output$nuagepoint <- renderPlotly({
  X = input$variableInputId
  Y = input$variable
  if(X != Y){
    iris %>%
      ggplot(mapping = aes(x= !!rlang::sym(X), y=!!rlang::sym(Y),color = Species)) +
      geom_point()
  }else{
    (  iris %>%
         ggplot(mapping = aes(x = !!rlang::sym(X),fill = Species,color = Species)) +
         geom_histogram(aes(y = after_stat(density)), position = position_identity(),alpha =0.5) +
         geom_density(position = position_identity(),alpha = 0.2) 
    )%>%
      ggplotly()
  }
})




```


















